{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/ReactLab/src/SelectReset.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport Context from \"./Context\";\nimport CounterTimer from \"./CounterTimer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectReset = () => {\n  _s();\n\n  const timeContext = useContext(Context);\n  const secondsArray = [10, 20, 30, 40, 50];\n  const [seconds, setSeconds] = useState();\n\n  const timeIndecis = e => {\n    setSeconds(e.currentTarget.value);\n  };\n\n  if (seconds) {\n    timeContext.time = seconds;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"selectReset\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: timeIndecis,\n      children: secondsArray.map((time, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: time,\n        children: [time, \" sec\"]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectReset, \"+O0ZbQkEIZGIxxhvAKGkjTg/P9I=\");\n\n_c = SelectReset;\nexport default SelectReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectReset\");","map":{"version":3,"sources":["/root/Desktop/ReactLab/src/SelectReset.js"],"names":["useContext","useState","Context","CounterTimer","SelectReset","timeContext","secondsArray","seconds","setSeconds","timeIndecis","e","currentTarget","value","time","map","i"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,WAAW,GAAGL,UAAU,CAACE,OAAD,CAA9B;AAEA,QAAMI,YAAY,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAArB;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,EAAtC;;AAEA,QAAMQ,WAAW,GAAIC,CAAD,IAAO;AACzBF,IAAAA,UAAU,CAACE,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAV;AACD,GAFD;;AAIA,MAAIL,OAAJ,EAAa;AACXF,IAAAA,WAAW,CAACQ,IAAZ,GAAmBN,OAAnB;AACD;;AAED,sBACE;AAAK,IAAA,EAAE,EAAC,aAAR;AAAA,4BACE;AAAQ,MAAA,QAAQ,EAAEE,WAAlB;AAAA,gBACGH,YAAY,CAACQ,GAAb,CAAiB,CAACD,IAAD,EAAOE,CAAP,kBAChB;AAAQ,QAAA,KAAK,EAAEF,IAAf;AAAA,mBACGA,IADH,EAEG,MAFH;AAAA,SAA0BE,CAA1B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA5BD;;GAAMX,W;;KAAAA,W;AA8BN,eAAeA,WAAf","sourcesContent":["import { useContext, useState } from \"react\";\nimport Context from \"./Context\";\nimport CounterTimer from \"./CounterTimer\";\n\nconst SelectReset = () => {\n  const timeContext = useContext(Context);\n\n  const secondsArray = [10, 20, 30, 40, 50];\n\n  const [seconds, setSeconds] = useState();\n\n  const timeIndecis = (e) => {\n    setSeconds(e.currentTarget.value);\n  };\n\n  if (seconds) {\n    timeContext.time = seconds;\n  }\n\n  return (\n    <div id=\"selectReset\">\n      <select onChange={timeIndecis}>\n        {secondsArray.map((time, i) => (\n          <option value={time} key={i}>\n            {time}\n            {\" sec\"}\n          </option>\n        ))}\n      </select>\n      <button>Reset</button>\n    </div>\n  );\n};\n\nexport default SelectReset;\n"]},"metadata":{},"sourceType":"module"}